package com.burmau.shop.model.fruit;

import jakarta.persistence.*;
import lombok.*;

import java.math.*;

/**
 *  This is the strawberry class which inherited some universal methods from the abstract superclass Fruit.
 *  It has the fields strawberryID, price, and description.
 */
@Entity
@Table(name = "strawberry")
@Getter @Setter
@AllArgsConstructor
@NoArgsConstructor
@ToString
public class Strawberry extends AbstractFruit {
    /**
     * This serves as the ID for this fruit class, and it is auto-generated by the persistance java generator so, I don't need to control this.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "strawberry_id", nullable = false)
    private Long strawberryID;
    /**
     *  This indicates the price of the item per can.
     */
    private static final String CATEGORY = "Strawberry";
    private static final BigDecimal BASE_PRICE = new BigDecimal("3.99").setScale(2, RoundingMode.HALF_UP);
    private BigDecimal price = BASE_PRICE;
    private String type = CATEGORY;
    /**
     * This is how the item is described to the customer or the whole company at large.
     */
    private String description;// = "Sweet, soft, red coloured fruit.";
    private double itemCount;

    Strawberry(double itemCount, String description){
        this.setType(type);
        this.setPrice(price(itemCount));
//        this.itemCount = itemCount;
        this.setItemCount(itemCount);
        this.description = description;
    }
    Strawberry(Long strawberryID, double itemCount, String description){
        this.strawberryID = strawberryID;
        this.setPrice(price(itemCount));
        this.itemCount = itemCount;
        this.description = description;
        this.setType(type);
    }
    public void setItemCount(double itemCount) {
        this.itemCount = itemCount;
        this.price = price(itemCount);
    }
    /**
     * <h2>Returns fruit name</h2>
     * This will always return strawberry
     *
     * @return Strawberry.
     */
    @Override
    String type() {
        return type;
    }

    /**
     * <h2>Compute the weight to return a price</h2>
     *
     * @param itemCount - get the weight of the current item
     * @return price of the fruit Strawberry.
     */
    @Override
    BigDecimal price(double itemCount) {
        return BASE_PRICE.multiply(BigDecimal.valueOf(Math.ceil(itemCount))).setScale(2, RoundingMode.HALF_UP);
    }

    /**
     * <h2>Retrieves the description of the item.</h2>
     * @return description - The sweet, soft, red fruit.
     */
    @Override
    String description() {
        return description;
    }
}
